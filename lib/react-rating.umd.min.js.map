{"version":3,"file":"react-rating.umd.min.js","sources":["../src/utils/style.js","../src/RatingSymbol.js","../src/Rating.js","../src/utils/noop.js","../src/RatingAPILayer.js"],"sourcesContent":["var style = {\n  display: 'inline-block',\n  borderRadius: '50%',\n  border: '5px double white',\n  width: 30,\n  height: 30\n};\n\nexport default {\n  empty: {\n    ...style,\n    backgroundColor: '#ccc'\n  },\n  full: {\n    ...style,\n    backgroundColor: 'black'\n  },\n  placeholder: {\n    ...style,\n    backgroundColor: 'red'\n  }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Tooltip from 'rc-tooltip';\n\n// Return the corresponding React node for an icon.\nconst _iconNode = (icon) => {\n  // If it is already a React Element just return it.\n  if (React.isValidElement(icon)) {\n    return icon;\n  }\n  // If it is an object, try to use it as a CSS style object.\n  if (typeof icon === 'object' && icon !== null) {\n    return <span style={icon} />;\n  }\n  // If it is a string, use it as class names.\n  if (Object.prototype.toString.call(icon) === '[object String]') {\n    return <span className={icon} />;\n  }\n};\n\nclass RatingSymbol extends React.PureComponent {\n  render() {\n    const {\n      index,\n      inactiveIcon,\n      activeIcon,\n      percent,\n      direction,\n      readonly,\n      onClick,\n      onMouseMove,\n      onTouchEnd,\n      showTooltip,\n      value\n    } = this.props;\n    const backgroundNode = _iconNode(inactiveIcon);\n    const showbgIcon = percent < 100;\n    const bgIconContainerStyle = showbgIcon\n      ? {}\n      : {\n        visibility: 'hidden'\n      };\n    const iconNode = _iconNode(activeIcon);\n    const iconContainerStyle = {\n      display: 'inline-block',\n      position: 'absolute',\n      overflow: 'hidden',\n      top: 0,\n      [direction === 'rtl' ? 'right' : 'left']: 0,\n      width: `${percent}%`\n    };\n    const style = {\n      cursor: !readonly ? 'pointer' : 'inherit',\n      display: 'inline-block',\n      position: 'relative'\n    };\n\n    function handleMouseMove(e) {\n      if (onMouseMove) {\n        onMouseMove(index, e);\n      }\n    }\n\n    function handleMouseClick(e) {\n      if (onClick) {\n        // [Supporting both TouchEvent and MouseEvent](https://developer.mozilla.org/en-US/docs/Web/API/Touch_events/Supporting_both_TouchEvent_and_MouseEvent)\n        // We must prevent firing click event twice on touch devices.\n        e.preventDefault();\n        onClick(index, e);\n      }\n    }\n\n    function handleTouchEnd(e) {\n      if (onTouchEnd) {\n        onTouchEnd(index, e);\n      }\n    }\n\n    return (\n      <Tooltip\n        overlay={value}\n        visible={showTooltip}\n        prefixCls=\"rc-slider-tooltip\"\n        placement=\"top\">\n        <span\n          style={style}\n          onClick={handleMouseClick}\n          onMouseMove={handleMouseMove}\n          onTouchMove={handleMouseMove}\n          onTouchEnd={handleTouchEnd}\n        >\n          <span style={bgIconContainerStyle}>\n            {backgroundNode}\n          </span>\n          <span style={iconContainerStyle}>\n            {iconNode}\n          </span>\n        </span>\n      </Tooltip>\n\n    );\n  }\n}\n\n// Define propTypes only in development. They will be void in production.\nRatingSymbol.propTypes = typeof __DEV__ !== 'undefined' && __DEV__ && {\n  index: PropTypes.number.isRequired,\n  readonly: PropTypes.bool.isRequired,\n  inactiveIcon: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object,\n    PropTypes.element\n  ]).isRequired,\n  activeIcon: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object,\n    PropTypes.element\n  ]).isRequired,\n  percent: PropTypes.number.isRequired,\n  direction: PropTypes.string.isRequired,\n  onClick: PropTypes.func,\n  onMouseMove: PropTypes.func,\n  onTouchMove: PropTypes.func,\n  onTouchEnd: PropTypes.func\n};\n\nexport default RatingSymbol;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Symbol from './RatingSymbol';\n\nclass Rating extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Indicates the value that is displayed to the user in the form of symbols.\n      // It can be either 0 (for no displayed symbols) or (0, end]\n      displayValue: this.props.value,\n      // Indicates if the user is currently hovering over the rating element\n      interacting: false\n    };\n    this.onMouseLeave = this.onMouseLeave.bind(this);\n    this.symbolMouseMove = this.symbolMouseMove.bind(this);\n    this.symbolClick = this.symbolClick.bind(this);\n    this.symbolEnd = this.symbolEnd.bind(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const valueChanged = this.props.value !== nextProps.value;\n    this.setState((prevState) => ({\n      displayValue: valueChanged ? nextProps.value : prevState.displayValue\n    }));\n  }\n\n  // NOTE: This callback is a little bit fragile. Needs some \"care\" because\n  // it relies on brittle state kept with different props and state\n  // combinations to try to figure out from where we are coming, I mean, what\n  // caused this update.\n  componentDidUpdate(prevProps, prevState) {\n    // When hover ends, call this.props.onHover with no value.\n    if (prevState.interacting && !this.state.interacting) {\n      return this.props.onHover();\n    }\n\n    // When hover over.\n    // Hover in should only be emitted while we are hovering (interacting),\n    // unless we changed the value, usually originated by an onClick event.\n    // We do not want to emit a hover in event again on the clicked\n    // symbol.\n    if (this.state.interacting && prevProps.value == this.props.value) {\n      this.props.onHover(this.state.displayValue);\n    }\n  }\n\n  symbolEnd(symbolIndex, event) {\n    // Do not raise the click event on quiet mode when a touch end is received.\n    // On quiet mode the touch end event only notifies that we have left the\n    // symbol. We wait for the actual click event to call the symbolClick.\n    // On not quiet mode we simulate the click event on touch end and we just\n    // prevent the real on click event to be raised.\n    // NOTE: I know how we manage click events on touch devices is a little bit\n    // weird because we do not notify the starting value that was clicked but\n    // the last (touched) value.\n    if (!this.props.quiet) {\n      this.symbolClick(symbolIndex, event);\n      event.preventDefault();\n    }\n    // On touch end we are \"leaving\" the symbol.\n    this.onMouseLeave();\n  }\n\n  symbolClick(symbolIndex, event) {\n    const value = this.calculateDisplayValue(symbolIndex, event);\n    this.props.onClick(value, event);\n  }\n\n  symbolMouseMove(symbolIndex, event) {\n    const value = this.calculateDisplayValue(symbolIndex, event);\n    // This call should cause an update only if the state changes.\n    // Mainly the first time the mouse enters and whenever the value changes.\n    // So DidComponentUpdate is NOT called for every mouse movement.\n    this.setState({\n      interacting: !this.props.readonly,\n      displayValue: value\n    });\n  }\n\n  onMouseLeave() {\n    this.setState({\n      displayValue: this.props.value,\n      interacting: false\n    });\n  }\n\n  calculateDisplayValue(symbolIndex, event) {\n    const percentage = this.calculateHoverPercentage(event);\n    // Get the closest top fraction.\n    const fraction = Math.ceil(percentage % 1 * this.props.fractions) / this.props.fractions;\n    // Truncate decimal trying to avoid float precission issues.\n    const precision = 10 ** 3;\n    const displayValue =\n      symbolIndex + (Math.floor(percentage) + Math.floor(fraction * precision) / precision);\n    // ensure the returned value is greater than 0 and lower than totalSymbols\n    return displayValue > 0 ? displayValue > this.props.totalSymbols ? this.props.totalSymbols : displayValue : 1 / this.props.fractions;\n  }\n\n  calculateHoverPercentage(event) {\n    const clientX = event.nativeEvent.type.indexOf(\"touch\") > -1\n      ? event.nativeEvent.type.indexOf(\"touchend\") > -1\n        ? event.changedTouches[0].clientX\n        : event.touches[0].clientX\n      : event.clientX;\n\n    const targetRect = event.target.getBoundingClientRect();\n    const delta = this.props.direction === 'rtl'\n      ? targetRect.right - clientX\n      : clientX - targetRect.left;\n\n    // Returning 0 if the delta is negative solves the flickering issue\n    return delta < 0 ? 0 : delta / targetRect.width;\n  }\n\n  render() {\n    const {\n      readonly,\n      quiet,\n      showTooltip,\n      totalSymbols,\n      value,\n      placeholderValue,\n      direction,\n      emptySymbol,\n      fullSymbol,\n      placeholderSymbol,\n      className,\n      id,\n      style,\n      tabIndex\n    } = this.props;\n    const { displayValue, interacting } = this.state;\n    const symbolNodes = [];\n    const empty = [].concat(emptySymbol);\n    const full = [].concat(fullSymbol);\n    const placeholder = [].concat(placeholderSymbol);\n    const shouldDisplayPlaceholder =\n      placeholderValue !== 0 &&\n      value === 0 &&\n      !interacting;\n\n    // The value that will be used as base for calculating how to render the symbols\n    let renderedValue;\n    if (shouldDisplayPlaceholder) {\n      renderedValue = placeholderValue;\n    } else {\n      renderedValue = quiet ? value : displayValue;\n    }\n\n    // The amount of full symbols\n    const fullSymbols = Math.floor(renderedValue);\n\n    for (let i = 0; i < totalSymbols; i++) {\n      let percent;\n      // Calculate each symbol's fullness percentage\n      if (i - fullSymbols < 0) {\n        percent = 100;\n      } else if (i - fullSymbols === 0) {\n        percent = (renderedValue - i) * 100;\n      } else {\n        percent = 0;\n      }\n\n      const renderTooltip = showTooltip && interacting && (i + 1) === Math.ceil(renderedValue);\n\n      symbolNodes.push(\n        <Symbol\n          key={i}\n          index={i}\n          readonly={readonly}\n          inactiveIcon={empty[i % empty.length]}\n          activeIcon={\n            shouldDisplayPlaceholder ? placeholder[i % full.length] : full[i % full.length]\n          }\n          percent={percent}\n          direction={direction}\n          showTooltip={renderTooltip}\n          value={renderedValue}\n          {...(!readonly && {\n            onClick: this.symbolClick,\n            onMouseMove: this.symbolMouseMove,\n            onTouchMove: this.symbolMouseMove,\n            onTouchEnd: this.symbolEnd\n          })}\n        />\n      );\n    }\n\n    return (\n      <span\n        id={id}\n        style={{ ...style, display: 'inline-block', direction }}\n        className={className}\n        tabIndex={tabIndex}\n        aria-label={this.props['aria-label']}\n        {...(!readonly && {\n          onMouseLeave: this.onMouseLeave\n        })}\n      >\n        {symbolNodes}\n      </span>\n    );\n  }\n}\n\n// Define propTypes only in development.\nRating.propTypes = typeof __DEV__ !== 'undefined' && __DEV__ && {\n  totalSymbols: PropTypes.number.isRequired,\n  value: PropTypes.number.isRequired, // Always >= 0\n  placeholderValue: PropTypes.number.isRequired,\n  readonly: PropTypes.bool.isRequired,\n  quiet: PropTypes.bool.isRequired,\n  fractions: PropTypes.number.isRequired,\n  direction: PropTypes.string.isRequired,\n  emptySymbol: PropTypes.oneOfType([\n    // Array of class names and/or style objects.\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.element])),\n    // Class names.\n    PropTypes.string,\n    // Style objects.\n    PropTypes.object,\n    // React element\n    PropTypes.element\n  ]).isRequired,\n  fullSymbol: PropTypes.oneOfType([\n    // Array of class names and/or style objects.\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.element])),\n    // Class names.\n    PropTypes.string,\n    // Style objects.\n    PropTypes.object,\n    // React element\n    PropTypes.element\n  ]).isRequired,\n  placeholderSymbol: PropTypes.oneOfType([\n    // Array of class names and/or style objects.\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.element])),\n    // Class names.\n    PropTypes.string,\n    // Style objects.\n    PropTypes.object,\n    // React element\n    PropTypes.element\n  ]),\n  onClick: PropTypes.func.isRequired,\n  onHover: PropTypes.func.isRequired\n};\n\nexport default Rating;\n","function noop() {}\nnoop._name = 'react_rating_noop';\n\nexport default noop;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Style from './utils/style';\nimport Rating from './Rating';\nimport noop from './utils/noop';\n\nclass RatingAPILayer extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: props.initialRating\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleHover = this.handleHover.bind(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    this.setState({\n      value: nextProps.initialRating\n    });\n  }\n\n  handleClick(value, e) {\n    const newValue = this.translateDisplayValueToValue(value);\n    this.props.onClick(newValue);\n    // Avoid calling setState if not necessary. Micro optimisation.\n    if (this.state.value !== newValue) {\n      // If we have a new value trigger onChange callback.\n      this.setState({\n        value: newValue\n      }, () => this.props.onChange(this.state.value));\n    }\n  }\n\n  handleHover(displayValue) {\n    const value = displayValue === undefined\n      ? displayValue\n      : this.translateDisplayValueToValue(displayValue);\n    this.props.onHover(value);\n  }\n\n  translateDisplayValueToValue(displayValue) {\n    const translatedValue = displayValue * this.props.step + this.props.start;\n    // minimum value cannot be equal to start, since it's exclusive\n    return translatedValue === this.props.start\n      ? translatedValue + 1 / this.props.fractions\n      : translatedValue;\n  }\n\n  tranlateValueToDisplayValue(value) {\n    if (value === undefined) {\n      return 0;\n    }\n    return (value - this.props.start) / this.props.step;\n  }\n\n  render() {\n    const {\n      step,\n      emptySymbol,\n      fullSymbol,\n      placeholderSymbol,\n      readonly,\n      quiet,\n      showTooltip,\n      fractions,\n      direction,\n      start,\n      stop,\n      id,\n      className,\n      style,\n      tabIndex\n    } = this.props;\n\n    function calculateTotalSymbols(start, stop, step) {\n      return Math.floor((stop - start) / step);\n    }\n\n    return (\n      <Rating\n        id={id}\n        style={style}\n        className={className}\n        tabIndex={tabIndex}\n        aria-label={this.props['aria-label']}\n        totalSymbols={calculateTotalSymbols(start, stop, step)}\n        value={this.tranlateValueToDisplayValue(this.state.value)}\n        placeholderValue={this.tranlateValueToDisplayValue(this.props.placeholderRating)}\n        readonly={readonly}\n        quiet={quiet}\n        showTooltip={showTooltip}\n        fractions={fractions}\n        direction={direction}\n        emptySymbol={emptySymbol}\n        fullSymbol={fullSymbol}\n        placeholderSymbol={placeholderSymbol}\n        onClick={this.handleClick}\n        onHover={this.handleHover}\n      />\n    );\n  }\n}\n\nRatingAPILayer.defaultProps = {\n  start: 0,\n  stop: 5,\n  step: 1,\n  readonly: false,\n  quiet: false,\n  showTooltip: false,\n  fractions: 1,\n  direction: 'ltr',\n  onHover: noop,\n  onClick: noop,\n  onChange: noop,\n  emptySymbol: Style.empty,\n  fullSymbol: Style.full,\n  placeholderSymbol: Style.placeholder\n};\n\n// Define propTypes only in development.\nRatingAPILayer.propTypes = typeof __DEV__ !== 'undefined' && __DEV__ && {\n  start: PropTypes.number,\n  stop: PropTypes.number,\n  step: PropTypes.number,\n  initialRating: PropTypes.number,\n  placeholderRating: PropTypes.number,\n  readonly: PropTypes.bool,\n  quiet: PropTypes.bool,\n  fractions: PropTypes.number,\n  direction: PropTypes.string,\n  emptySymbol: PropTypes.oneOfType([\n    // Array of class names and/or style objects.\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.element])),\n    // Class names.\n    PropTypes.string,\n    // Style objects.\n    PropTypes.object,\n    // React element\n    PropTypes.element\n  ]),\n  fullSymbol: PropTypes.oneOfType([\n    // Array of class names and/or style objects.\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.element])),\n    // Class names.\n    PropTypes.string,\n    // Style objects.\n    PropTypes.object,\n    // React element\n    PropTypes.element\n  ]),\n  placeholderSymbol: PropTypes.oneOfType([\n    // Array of class names and/or style objects.\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.element])),\n    // Class names.\n    PropTypes.string,\n    // Style objects.\n    PropTypes.object,\n    // React element\n    PropTypes.element\n  ]),\n  onHover: PropTypes.func,\n  onClick: PropTypes.func,\n  onChange: PropTypes.func\n};\n\nexport default RatingAPILayer;\n"],"names":["style","display","borderRadius","border","width","height","empty","backgroundColor","full","placeholder","_iconNode","icon","React","isValidElement","_typeof","Object","prototype","toString","call","className","RatingSymbol","this","props","index","inactiveIcon","activeIcon","percent","direction","readonly","onClick","onMouseMove","onTouchEnd","showTooltip","value","backgroundNode","bgIconContainerStyle","visibility","iconNode","iconContainerStyle","position","overflow","top","cursor","handleMouseMove","e","Tooltip","overlay","visible","prefixCls","placement","preventDefault","onTouchMove","PureComponent","Rating","state","displayValue","_this","interacting","onMouseLeave","bind","symbolMouseMove","symbolClick","symbolEnd","nextProps","valueChanged","setState","prevState","prevProps","onHover","symbolIndex","event","quiet","calculateDisplayValue","percentage","calculateHoverPercentage","fraction","Math","ceil","fractions","precision","floor","totalSymbols","clientX","nativeEvent","type","indexOf","changedTouches","touches","targetRect","target","getBoundingClientRect","delta","right","left","renderedValue","placeholderValue","emptySymbol","fullSymbol","placeholderSymbol","id","tabIndex","symbolNodes","concat","shouldDisplayPlaceholder","fullSymbols","i","renderTooltip","push","_Symbol","key","length","noop","_name","RatingAPILayer","initialRating","handleClick","handleHover","newValue","translateDisplayValueToValue","_this2","onChange","undefined","translatedValue","step","start","stop","calculateTotalSymbols","tranlateValueToDisplayValue","placeholderRating","defaultProps","Style"],"mappings":"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"}